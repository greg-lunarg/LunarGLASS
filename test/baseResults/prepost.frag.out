
Top IR:
; ModuleID = 'Glslang'

%s = type { [5 x float] }

@gl_FragColor = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %v = alloca <4 x float>
  %z = alloca float
  %y = alloca float
  %x = alloca float
  %t = alloca float
  %str = alloca %s
  %index = alloca i32
  br label %mainBody

mainBody:                                         ; preds = %entry
  store i32 5, i32* %index
  %0 = getelementptr %s* %str, i32 0, i32 0, i32 4
  store float 2.000000e+00, float* %0
  %1 = load i32* %index
  %index1 = sub i32 %1, 1
  store i32 %index1, i32* %index
  %2 = getelementptr %s* %str, i32 0, i32 0, i32 %index1
  %3 = load float* %2
  %t2 = fadd float %3, 1.000000e+00
  store float %t2, float* %2
  store float %t2, float* %t
  %4 = load float* %t
  %5 = getelementptr %s* %str, i32 0, i32 0, i32 4
  %6 = load float* %5
  %7 = fadd float %6, %4
  %8 = getelementptr %s* %str, i32 0, i32 0, i32 4
  store float %7, float* %8
  %9 = getelementptr %s* %str, i32 0, i32 0, i32 4
  %t3 = load float* %9
  %10 = fsub float %t3, 1.000000e+00
  store float %10, float* %9
  store float %t3, float* %t
  %11 = load i32* %index
  %index4 = add i32 %11, 1
  store i32 %index4, i32* %index
  %12 = load float* %t
  %13 = getelementptr %s* %str, i32 0, i32 0, i32 %11
  %14 = load float* %13
  %15 = fadd float %14, %12
  %16 = getelementptr %s* %str, i32 0, i32 0, i32 %11
  store float %15, float* %16
  %17 = load i32* %index
  %index5 = sub i32 %17, 1
  store i32 %index5, i32* %index
  %18 = getelementptr %s* %str, i32 0, i32 0, i32 %index5
  %19 = load float* %18
  %20 = fsub float %19, 1.000000e+00
  store float %20, float* %18
  %21 = getelementptr %s* %str, i32 0, i32 0, i32 4
  %x6 = load float* %21
  store float %x6, float* %x
  %22 = load float* %x
  %x7 = fadd float %22, 1.000000e+00
  store float %x7, float* %x
  %23 = load float* %x
  %x8 = fsub float %23, 1.000000e+00
  store float %x8, float* %x
  %24 = load float* %x
  %x9 = fadd float %24, 1.000000e+00
  store float %x9, float* %x
  %25 = load float* %x
  %x10 = fsub float %25, 1.000000e+00
  store float %x10, float* %x
  %26 = load float* %x
  %27 = load float* %x
  %x11 = fadd float %27, 1.000000e+00
  store float %x11, float* %x
  %y12 = fmul float %26, %x11
  store float %y12, float* %y
  %28 = load float* %y
  %29 = load float* %x
  %x13 = fsub float %29, 1.000000e+00
  store float %x13, float* %x
  %z14 = fmul float %28, %29
  store float %z14, float* %z
  store <4 x float> <float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00>, <4 x float>* %v
  %30 = load <4 x float>* %v
  %31 = extractelement <4 x float> %30, i32 2
  %32 = fsub float %31, 1.000000e+00
  %33 = getelementptr <4 x float>* %v, i32 0, i32 2
  store float %32, float* %33
  %34 = getelementptr <4 x float>* %v, i32 0, i32 1
  store float %31, float* %34
  %35 = load <4 x float>* %v
  %36 = extractelement <4 x float> %35, i32 3
  %37 = fsub float %36, 1.000000e+00
  %38 = getelementptr <4 x float>* %v, i32 0, i32 3
  store float %37, float* %38
  %39 = getelementptr <4 x float>* %v, i32 0, i32 0
  store float %37, float* %39
  %40 = load float* %z
  %41 = load <4 x float>* %v
  %42 = insertelement <4 x float> undef, float %40, i32 0
  %43 = insertelement <4 x float> %42, float %40, i32 1
  %44 = insertelement <4 x float> %43, float %40, i32 2
  %45 = insertelement <4 x float> %44, float %40, i32 3
  %gl_FragColor = fmul <4 x float> %45, %41
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %mainBody
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

!gla.entrypoint = !{!0}
!gla.outputs = !{!1}

!0 = !{!"main", i32 15}
!1 = !{!"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, !2}
!2 = !{i32 0, i32 0, i32 1024, null, i32 0, i32 43, i32 -1, i32 0, i32 -1}


Bottom IR:
; ModuleID = 'Glslang'
target datalayout = "e-p:32:32"

@gl_FragColor = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %v = alloca <4 x float>
  store <4 x float> <float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00>, <4 x float>* %v
  %0 = getelementptr <4 x float>* %v, i32 0, i32 2
  store float 2.000000e+00, float* %0
  %1 = getelementptr <4 x float>* %v, i32 0, i32 1
  store float 3.000000e+00, float* %1
  %2 = load <4 x float>* %v
  %3 = extractelement <4 x float> %2, i32 3
  %4 = fadd float %3, -1.000000e+00
  %5 = getelementptr <4 x float>* %v, i32 0, i32 3
  store float %4, float* %5
  %6 = getelementptr <4 x float>* %v, i32 0, i32 0
  store float %4, float* %6
  %7 = load <4 x float>* %v
  %gl_FragColor = fmul <4 x float> %7, <float 1.210000e+03, float 1.210000e+03, float 1.210000e+03, float 1.210000e+03>
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

!gla.entrypoint = !{!0}
!gla.outputs = !{!1}

!0 = !{!"main", i32 15}
!1 = !{!"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, !2}
!2 = !{i32 0, i32 0, i32 1024, null, i32 0, i32 43, i32 -1, i32 0, i32 -1}
#version 140
// LunarGOO output
const vec4 C_0ci24t1 = vec4(1.0, 2.0, 3.0, 4.0);
const float C_2d0 = 2.0;
const float C_3d0 = 3.0;
const float C_a1d0 = -1.0;
const vec4 C_wol4dn = vec4(1210.0);

void main()
{
	vec4 Lg_1;
	C_0ci24t1.z = C_2d0;
	C_0ci24t1.y = C_3d0;
	float H_e90t8c = C_0ci24t1.w + C_a1d0;
	C_0ci24t1.w = H_e90t8c;
	C_0ci24t1.x = H_e90t8c;
	vec4 Ll_FragColor1 = C_0ci24t1 * C_wol4dn;
	gl_FragColor = Ll_FragColor1;
	
}

