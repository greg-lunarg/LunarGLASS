
Top IR:
; ModuleID = 'Glslang'

%gl_PerVertex = type { float }
%gl_PerVertex.0 = type { float }

@gl_in = global [3 x %gl_PerVertex] zeroinitializer
@"anon@0" = global %gl_PerVertex.0 zeroinitializer
@gl_ViewportIndex = global i32 0
@gl_InvocationID = global i32 0
@s2D = external addrspace(1) constant i32
@coord = global [3 x <2 x float>] zeroinitializer
@v = internal constant [5 x <2 x i32>] [<2 x i32> <i32 0, i32 1>, <2 x i32> <i32 1, i32 -2>, <2 x i32> <i32 0, i32 3>, <2 x i32> <i32 -3, i32 0>, <2 x i32> <i32 2, i32 1>]
@i = external addrspace(2) constant i32
@v4 = external addrspace(2) constant <4 x float>

define fastcc void @main() {
entry:
  %v = alloca <4 x float>
  %id = alloca i32
  %p = alloca float
  br label %mainBody

mainBody:                                         ; preds = %entry
  %p1 = load float* getelementptr inbounds ([3 x %gl_PerVertex]* @gl_in, i32 0, i32 1, i32 0)
  store float %p1, float* %p
  %0 = load float* %p
  store float %0, float* getelementptr inbounds (%gl_PerVertex.0* @"anon@0", i32 0, i32 0)
  store i32 7, i32* @gl_ViewportIndex
  call void @llvm.gla.emitStreamVertex.i32.i32(i32 1)
  call void @llvm.gla.endStreamPrimitive.i32.i32(i32 0)
  call void @llvm.gla.emitVertex()
  call void @llvm.gla.endPrimitive()
  %id2 = load i32* @gl_InvocationID
  store i32 %id2, i32* %id
  %1 = load i32 addrspace(1)* @s2D, !gla.uniform !18
  %2 = load <2 x float>* getelementptr inbounds ([3 x <2 x float>]* @coord, i32 0, i32 0)
  %3 = load i32 addrspace(2)* @i, !gla.uniform !21
  %4 = getelementptr [5 x <2 x i32>]* @v, i32 0, i32 %3
  %5 = load <2 x i32>* %4
  %v4 = call <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32 2, i32 %1, i32 320, <2 x float> %2, i32 undef, float undef, <2 x i32> %5)
  store <4 x float> %v4, <4 x float>* %v
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %mainBody
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare void @llvm.gla.emitStreamVertex.i32.i32(i32)

declare void @llvm.gla.endStreamPrimitive.i32.i32(i32)

; Function Attrs: nounwind
declare void @llvm.gla.emitVertex() #0

; Function Attrs: nounwind
declare void @llvm.gla.endPrimitive() #0

; Function Attrs: nounwind readnone
declare <4 x float> @llvm.gla.fTexelGatherOffset.v4f32.v2f32(i32, i32, i32, <2 x float>, i32, float, <2 x i32>) #1

attributes #0 = { nounwind }
attributes #1 = { nounwind readnone }

!gla.invocations = !{!0}
!gla.numVertices = !{!1}
!gla.inputPrimitive = !{!2}
!gla.outputPrimitive = !{!0}
!gla.entrypoint = !{!3}
!gla.inputs = !{!4, !10, !12}
!gla.outputs = !{!14, !16}
!gla.uniforms = !{!18, !21, !22}
!gla.noStaticUse = !{!22}

!0 = !{i32 4}
!1 = !{i32 127}
!2 = !{i32 5}
!3 = !{!"main", i32 15}
!4 = !{!"gl_in", i32 17, [3 x %gl_PerVertex]* @gl_in_typeProxy, !5, !6}
!5 = !{i32 0, i32 0, i32 1024, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!6 = !{!"gl_PerVertex", !7, !"gl_PointSize", !8}
!7 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!8 = !{!"", !9}
!9 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 10, i32 -1, i32 0, i32 -1}
!10 = !{!"gl_InvocationID", i32 1, i32* @gl_InvocationID_typeProxy, !11}
!11 = !{i32 0, i32 0, i32 1031, null, i32 0, i32 30, i32 -1, i32 0, i32 -1}
!12 = !{!"coord", i32 1, [3 x <2 x float>]* @coord_typeProxy, !13}
!13 = !{i32 0, i32 0, i32 1032, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!14 = !{!"", i32 16, %gl_PerVertex.0* @"anon@0_typeProxy", !15, !6}
!15 = !{i32 0, i32 0, i32 1027, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!16 = !{!"gl_ViewportIndex", i32 7, i32* @gl_ViewportIndex_typeProxy, !17}
!17 = !{i32 0, i32 0, i32 1030, null, i32 0, i32 33, i32 -1, i32 0, i32 -1}
!18 = !{!"s2D", i32 12, i32* @s2D_typeProxy, !19}
!19 = !{i32 5, i32 0, i32 1024, !20, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!20 = !{i32 0, i32* @s2D_typeProxy, i32 1, i1 false, i1 false, i32 0}
!21 = !{!"i", i32 12, i32* @i_typeProxy, !7}
!22 = !{!"v4", i32 12, <4 x float>* @v4_typeProxy, !7}


Bottom IR:
; ModuleID = 'Glslang'
target datalayout = "e-p:32:32"

%gl_PerVertex = type { float }
%gl_PerVertex.0 = type { float }

@gl_in = global [3 x %gl_PerVertex] zeroinitializer
@"anon@0" = global %gl_PerVertex.0 zeroinitializer
@gl_ViewportIndex = global i32 0
@gl_InvocationID = global i32 0
@coord = global [3 x <2 x float>] zeroinitializer

define fastcc void @main() {
entry:
  %gla_constGEP = getelementptr [3 x %gl_PerVertex]* @gl_in, i32 0, i32 1, i32 0
  %p1 = load float* %gla_constGEP
  %gla_constGEP5 = getelementptr %gl_PerVertex.0* @"anon@0", i32 0, i32 0
  store float %p1, float* %gla_constGEP5
  store i32 7, i32* @gl_ViewportIndex
  call void @llvm.gla.emitStreamVertex.i32.i32(i32 1)
  call void @llvm.gla.endStreamPrimitive.i32.i32(i32 0)
  call void @llvm.gla.emitVertex()
  call void @llvm.gla.endPrimitive()
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

declare void @llvm.gla.emitStreamVertex.i32.i32(i32)

declare void @llvm.gla.endStreamPrimitive.i32.i32(i32)

; Function Attrs: nounwind
declare void @llvm.gla.emitVertex() #0

; Function Attrs: nounwind
declare void @llvm.gla.endPrimitive() #0

attributes #0 = { nounwind }

!gla.invocations = !{!0}
!gla.numVertices = !{!1}
!gla.inputPrimitive = !{!2}
!gla.outputPrimitive = !{!0}
!gla.entrypoint = !{!3}
!gla.inputs = !{!4, !10, !12}
!gla.outputs = !{!14, !16}
!gla.uniforms = !{!18, !21, !22}
!gla.noStaticUse = !{!22}

!0 = !{i32 4}
!1 = !{i32 127}
!2 = !{i32 5}
!3 = !{!"main", i32 15}
!4 = !{!"gl_in", i32 17, [3 x %gl_PerVertex]* @gl_in_typeProxy, !5, !6}
!5 = !{i32 0, i32 0, i32 1024, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!6 = !{!"gl_PerVertex", !7, !"gl_PointSize", !8}
!7 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!8 = !{!"", !9}
!9 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 10, i32 -1, i32 0, i32 -1}
!10 = !{!"gl_InvocationID", i32 1, i32* @gl_InvocationID_typeProxy, !11}
!11 = !{i32 0, i32 0, i32 1031, null, i32 0, i32 30, i32 -1, i32 0, i32 -1}
!12 = !{!"coord", i32 1, [3 x <2 x float>]* @coord_typeProxy, !13}
!13 = !{i32 0, i32 0, i32 1032, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!14 = !{!"", i32 16, %gl_PerVertex.0* @"anon@0_typeProxy", !15, !6}
!15 = !{i32 0, i32 0, i32 1027, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!16 = !{!"gl_ViewportIndex", i32 7, i32* @gl_ViewportIndex_typeProxy, !17}
!17 = !{i32 0, i32 0, i32 1030, null, i32 0, i32 33, i32 -1, i32 0, i32 -1}
!18 = !{!"s2D", i32 12, i32* @s2D_typeProxy, !19}
!19 = !{i32 5, i32 0, i32 1024, !20, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!20 = !{i32 0, i32* @s2D_typeProxy, i32 1, i1 false, i1 false, i32 0}
!21 = !{!"i", i32 12, i32* @i_typeProxy, !7}
!22 = !{!"v4", i32 12, <4 x float>* @v4_typeProxy, !7}

***Unsupported functionality: intrinsic without valid intrinsic ID

***Unsupported functionality: intrinsic without valid intrinsic ID
#version 420 core
// LunarGOO output
layout(triangles) in;
layout(invocations = 4) in;
layout(line_strip) out;
layout(max_vertices = 127) out;
uniform sampler2D s2D;
uniform int i;
uniform vec4 v4;
in gl_PerVertex {
	float gl_PointSize;
} gl_in[3];
in vec2 coord[3];
out gl_PerVertex {
	float gl_PointSize;
} ;
const int C_7 = 7;

void main()
{
	gl_PointSize = gl_in[1].gl_PointSize;
	gl_ViewportIndex = C_7;
	EmitVertex();
	EndPrimitive();
	
}

