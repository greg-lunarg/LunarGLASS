
Top IR:
; ModuleID = 'Glslang'

@BaseColor = global <4 x float> zeroinitializer
@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@gl_FragColor = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %color = alloca <4 x float>
  br label %mainBody

mainBody:                                         ; preds = %entry
  %color1 = load <4 x float>* @BaseColor
  store <4 x float> %color1, <4 x float>* %color
  br label %loop-header

loop-header:                                      ; preds = %ifmerge, %mainBody
  %0 = load <4 x float>* %color
  %1 = extractelement <4 x float> %0, i32 0
  %2 = load float addrspace(2)* @d, !gla.uniform !3
  %3 = fcmp olt float %1, %2
  %4 = xor i1 %3, true
  br i1 %4, label %then, label %ifmerge

then:                                             ; preds = %loop-header
  br label %loop-merge

post-loop-break:                                  ; No predecessors!
  unreachable

ifmerge:                                          ; preds = %loop-header
  %5 = load <4 x float> addrspace(2)* @bigColor, !gla.uniform !5
  %6 = load <4 x float>* %color
  %color2 = fadd <4 x float> %6, %5
  store <4 x float> %color2, <4 x float>* %color
  br label %loop-header

loop-merge:                                       ; preds = %then
  %gl_FragColor = load <4 x float>* %color
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %loop-merge
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.uniforms = !{!3, !5}
!gla.outputs = !{!6}

!0 = !{!"main", i32 15}
!1 = !{!"BaseColor", i32 1, <4 x float>* @BaseColor_typeProxy, !2}
!2 = !{i32 0, i32 0, i32 1024, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!3 = !{!"d", i32 12, float* @d_typeProxy, !4}
!4 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!5 = !{!"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, !4}
!6 = !{!"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, !7}
!7 = !{i32 0, i32 0, i32 1025, null, i32 0, i32 43, i32 -1, i32 0, i32 -1}


Bottom IR:
; ModuleID = 'Glslang'
target datalayout = "e-p:32:32"

@BaseColor = global <4 x float> zeroinitializer
@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@gl_FragColor = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %color1 = load <4 x float>* @BaseColor
  %.pre = load float addrspace(2)* @d
  %0 = load <4 x float> addrspace(2)* @bigColor, !gla.uniform !5
  %1 = extractelement <4 x float> %color1, i32 0
  %2 = fcmp uge float %1, %.pre
  br i1 %2, label %loop-merge, label %ifmerge.lr.ph

ifmerge.lr.ph:                                    ; preds = %entry
  br label %ifmerge

ifmerge:                                          ; preds = %ifmerge.lr.ph, %ifmerge
  %color.03 = phi <4 x float> [ %color1, %ifmerge.lr.ph ], [ %color2, %ifmerge ]
  %color2 = fadd <4 x float> %color.03, %0
  %3 = extractelement <4 x float> %color2, i32 0
  %4 = fcmp uge float %3, %.pre
  br i1 %4, label %loop-header.loop-merge_crit_edge, label %ifmerge

loop-header.loop-merge_crit_edge:                 ; preds = %ifmerge
  br label %loop-merge

loop-merge:                                       ; preds = %loop-header.loop-merge_crit_edge, %entry
  %color.0.lcssa = phi <4 x float> [ %color2, %loop-header.loop-merge_crit_edge ], [ %color1, %entry ]
  store <4 x float> %color.0.lcssa, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %loop-merge
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.uniforms = !{!3, !5}
!gla.outputs = !{!6}

!0 = !{!"main", i32 15}
!1 = !{!"BaseColor", i32 1, <4 x float>* @BaseColor_typeProxy, !2}
!2 = !{i32 0, i32 0, i32 1024, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!3 = !{!"d", i32 12, float* @d_typeProxy, !4}
!4 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!5 = !{!"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, !4}
!6 = !{!"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, !7}
!7 = !{i32 0, i32 0, i32 1025, null, i32 0, i32 43, i32 -1, i32 0, i32 -1}
#version 110
// LunarGOO output
uniform float d;
uniform vec4 bigColor;
varying vec4 BaseColor;

void main()
{
	vec4 color;
	vec4 color1;
	bool H_y2y04d1 = BaseColor.x >= d;
	color1 = BaseColor;
	if (H_y2y04d1) {
		gl_FragColor = color1;
		return;
	} else {
		color = BaseColor;
		while (true) {
			vec4 color2 = bigColor + color;
			bool H_hyll5l = color2.x >= d;
			if (H_hyll5l) {
				break;
			}
			
			color = color2;
		}
		
		color1 = color2;
	}
	
}

