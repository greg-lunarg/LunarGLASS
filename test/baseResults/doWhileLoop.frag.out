
Top IR:
; ModuleID = 'Glslang'

@BaseColor = global <4 x float> zeroinitializer
@bigColor = external addrspace(2) constant <4 x float>
@d = external addrspace(2) constant float
@gl_FragColor = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %color = alloca <4 x float>
  br label %mainBody

mainBody:                                         ; preds = %entry
  %color1 = load <4 x float>* @BaseColor
  store <4 x float> %color1, <4 x float>* %color
  br label %loop-header

loop-header:                                      ; preds = %mainBody
  br label %loop-body

loop-body:                                        ; preds = %loop-test, %loop-header
  %0 = load <4 x float> addrspace(2)* @bigColor, !gla.uniform !3
  %1 = load <4 x float>* %color
  %color2 = fadd <4 x float> %1, %0
  store <4 x float> %color2, <4 x float>* %color
  br label %loop-test

loop-test:                                        ; preds = %loop-body
  %2 = load <4 x float>* %color
  %3 = extractelement <4 x float> %2, i32 0
  %4 = load float addrspace(2)* @d, !gla.uniform !5
  %5 = fcmp olt float %3, %4
  br i1 %5, label %loop-body, label %loop-merge

loop-merge:                                       ; preds = %loop-test
  %gl_FragColor = load <4 x float>* %color
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %loop-merge
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.uniforms = !{!3, !5}
!gla.outputs = !{!6}

!0 = !{!"main", i32 15}
!1 = !{!"BaseColor", i32 1, <4 x float>* @BaseColor_typeProxy, !2}
!2 = !{i32 0, i32 0, i32 1024, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!3 = !{!"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, !4}
!4 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!5 = !{!"d", i32 12, float* @d_typeProxy, !4}
!6 = !{!"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, !7}
!7 = !{i32 0, i32 0, i32 1025, null, i32 0, i32 43, i32 -1, i32 0, i32 -1}


Bottom IR:
; ModuleID = 'Glslang'
target datalayout = "e-p:32:32"

@BaseColor = global <4 x float> zeroinitializer
@bigColor = external addrspace(2) constant <4 x float>
@d = external addrspace(2) constant float
@gl_FragColor = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %color1 = load <4 x float>* @BaseColor
  %.pre = load <4 x float> addrspace(2)* @bigColor
  %.pre3 = load float addrspace(2)* @d
  br label %loop-body

loop-body:                                        ; preds = %loop-body, %entry
  %color.0 = phi <4 x float> [ %color1, %entry ], [ %color2, %loop-body ]
  %color2 = fadd <4 x float> %color.0, %.pre
  %0 = extractelement <4 x float> %color2, i32 0
  %1 = fcmp olt float %0, %.pre3
  br i1 %1, label %loop-body, label %loop-merge

loop-merge:                                       ; preds = %loop-body
  store <4 x float> %color2, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %loop-merge
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

!gla.entrypoint = !{!0}
!gla.inputs = !{!1}
!gla.uniforms = !{!3, !5}
!gla.outputs = !{!6}

!0 = !{!"main", i32 15}
!1 = !{!"BaseColor", i32 1, <4 x float>* @BaseColor_typeProxy, !2}
!2 = !{i32 0, i32 0, i32 1024, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!3 = !{!"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, !4}
!4 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!5 = !{!"d", i32 12, float* @d_typeProxy, !4}
!6 = !{!"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, !7}
!7 = !{i32 0, i32 0, i32 1025, null, i32 0, i32 43, i32 -1, i32 0, i32 -1}
#version 110
// LunarGOO output
uniform vec4 bigColor;
uniform float d;
varying vec4 BaseColor;

void main()
{
	vec4 color;
	color = BaseColor;
	while (true) {
		vec4 color1 = bigColor + color;
		bool H_1v5ao91 = color1.x < d;
		if (! H_1v5ao91) {
			break;
		}
		
		color = color1;
	}
	
	gl_FragColor = color1;
	
}

