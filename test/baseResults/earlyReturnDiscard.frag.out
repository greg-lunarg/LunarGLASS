
Top IR:
; ModuleID = 'Glslang'

@BaseColor = global <4 x float> zeroinitializer
@otherColor = external addrspace(2) constant <4 x float>
@c = global float 0.000000e+00
@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@smallColor = external addrspace(2) constant <4 x float>
@minimum = external addrspace(2) constant float
@threshhold = external addrspace(2) constant float
@threshhold2 = external addrspace(2) constant float
@b = external addrspace(2) constant i1
@gl_FragColor = global <4 x float> zeroinitializer
@threshhold3 = external addrspace(2) constant float

define fastcc void @main() {
entry:
  %color2 = alloca <4 x float>
  %color = alloca <4 x float>
  br label %mainBody

mainBody:                                         ; preds = %entry
  %color1 = load <4 x float>* @BaseColor
  store <4 x float> %color1, <4 x float>* %color
  %color22 = load <4 x float> addrspace(2)* @otherColor, !gla.uniform !5
  store <4 x float> %color22, <4 x float>* %color2
  %0 = load float* @c
  %1 = load float addrspace(2)* @d, !gla.uniform !7
  %2 = fcmp ogt float %0, %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %mainBody
  %3 = load <4 x float> addrspace(2)* @bigColor, !gla.uniform !8
  %4 = load <4 x float>* %color
  %color3 = fadd <4 x float> %4, %3
  store <4 x float> %color3, <4 x float>* %color
  br label %ifmerge

else:                                             ; preds = %mainBody
  %5 = load <4 x float> addrspace(2)* @smallColor, !gla.uniform !9
  %6 = load <4 x float>* %color
  %color4 = fadd <4 x float> %6, %5
  store <4 x float> %color4, <4 x float>* %color
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %7 = load <4 x float>* %color
  %8 = extractelement <4 x float> %7, i32 2
  %9 = load float addrspace(2)* @minimum, !gla.uniform !10
  %10 = fcmp olt float %8, %9
  br i1 %10, label %then5, label %ifmerge6

then5:                                            ; preds = %ifmerge
  br label %stage-epilogue

post-return:                                      ; No predecessors!
  unreachable

ifmerge6:                                         ; preds = %ifmerge
  %11 = load <4 x float>* %color
  %12 = extractelement <4 x float> %11, i32 2
  %13 = fadd float %12, 1.000000e+00
  %14 = getelementptr <4 x float>* %color, i32 0, i32 2
  store float %13, float* %14
  %15 = load <4 x float>* %color
  %16 = extractelement <4 x float> %15, i32 2
  %17 = load float addrspace(2)* @threshhold, !gla.uniform !11
  %18 = fcmp ogt float %16, %17
  br i1 %18, label %then7, label %ifmerge8

then7:                                            ; preds = %ifmerge6
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard:                                     ; No predecessors!
  unreachable

ifmerge8:                                         ; preds = %ifmerge6
  %19 = load <4 x float>* %color
  %color9 = fadd <4 x float> %19, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color9, <4 x float>* %color
  %20 = load <4 x float>* %color
  %21 = extractelement <4 x float> %20, i32 3
  %22 = load float addrspace(2)* @threshhold2, !gla.uniform !12
  %23 = fcmp ogt float %21, %22
  br i1 %23, label %then10, label %else23

then10:                                           ; preds = %ifmerge8
  %24 = load <4 x float>* %color
  %25 = extractelement <4 x float> %24, i32 2
  %26 = load float addrspace(2)* @threshhold2, !gla.uniform !12
  %27 = fcmp ogt float %25, %26
  br i1 %27, label %then11, label %else13

then11:                                           ; preds = %then10
  br label %stage-epilogue

post-return12:                                    ; No predecessors!
  unreachable

else13:                                           ; preds = %then10
  %28 = load i1 addrspace(2)* @b, !gla.uniform !13
  br i1 %28, label %then14, label %else15

then14:                                           ; preds = %else13
  %29 = load <4 x float>* %color
  %30 = extractelement <4 x float> %29, i32 2
  %31 = fadd float %30, 1.000000e+00
  %32 = getelementptr <4 x float>* %color, i32 0, i32 2
  store float %31, float* %32
  br label %ifmerge21

else15:                                           ; preds = %else13
  %33 = load <4 x float>* %color
  %34 = extractelement <4 x float> %33, i32 0
  %35 = load float addrspace(2)* @minimum, !gla.uniform !10
  %36 = fcmp olt float %34, %35
  br i1 %36, label %then16, label %else18

then16:                                           ; preds = %else15
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard17:                                   ; No predecessors!
  unreachable

else18:                                           ; preds = %else15
  %37 = load <4 x float>* %color
  %color19 = fadd <4 x float> %37, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color19, <4 x float>* %color
  br label %ifmerge20

ifmerge20:                                        ; preds = %else18
  br label %ifmerge21

ifmerge21:                                        ; preds = %ifmerge20, %then14
  br label %ifmerge22

ifmerge22:                                        ; preds = %ifmerge21
  br label %ifmerge29

else23:                                           ; preds = %ifmerge8
  %38 = load i1 addrspace(2)* @b, !gla.uniform !13
  br i1 %38, label %then24, label %else26

then24:                                           ; preds = %else23
  call void @llvm.gla.discard()
  br label %stage-exit

post-discard25:                                   ; No predecessors!
  unreachable

else26:                                           ; preds = %else23
  br label %stage-epilogue

post-return27:                                    ; No predecessors!
  unreachable

ifmerge28:                                        ; No predecessors!
  br label %ifmerge29

ifmerge29:                                        ; preds = %ifmerge28, %ifmerge22
  %39 = load <4 x float>* %color
  %40 = load <4 x float>* %color2
  %gl_FragColor = fmul <4 x float> %39, %40
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge29, %else26, %then11, %then5
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %then24, %then16, %then7
  ret void
}

; Function Attrs: nounwind
declare void @llvm.gla.discard() #0

attributes #0 = { nounwind }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1, !3}
!gla.uniforms = !{!5, !7, !8, !9, !10, !11, !12, !13, !14}
!gla.outputs = !{!15}
!gla.noStaticUse = !{!14}

!0 = !{!"main", i32 15}
!1 = !{!"BaseColor", i32 1, <4 x float>* @BaseColor_typeProxy, !2}
!2 = !{i32 0, i32 0, i32 1024, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!3 = !{!"c", i32 1, float* @c_typeProxy, !4}
!4 = !{i32 0, i32 0, i32 1025, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!5 = !{!"otherColor", i32 12, <4 x float>* @otherColor_typeProxy, !6}
!6 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!7 = !{!"d", i32 12, float* @d_typeProxy, !6}
!8 = !{!"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, !6}
!9 = !{!"smallColor", i32 12, <4 x float>* @smallColor_typeProxy, !6}
!10 = !{!"minimum", i32 12, float* @minimum_typeProxy, !6}
!11 = !{!"threshhold", i32 12, float* @threshhold_typeProxy, !6}
!12 = !{!"threshhold2", i32 12, float* @threshhold2_typeProxy, !6}
!13 = !{!"b", i32 12, i1* @b_typeProxy, !6}
!14 = !{!"threshhold3", i32 12, float* @threshhold3_typeProxy, !6}
!15 = !{!"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, !16}
!16 = !{i32 0, i32 0, i32 1026, null, i32 0, i32 43, i32 -1, i32 0, i32 -1}


Bottom IR:
; ModuleID = 'Glslang'
target datalayout = "e-p:32:32"

@BaseColor = global <4 x float> zeroinitializer
@otherColor = external addrspace(2) constant <4 x float>
@c = global float 0.000000e+00
@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@smallColor = external addrspace(2) constant <4 x float>
@minimum = external addrspace(2) constant float
@threshhold = external addrspace(2) constant float
@threshhold2 = external addrspace(2) constant float
@b = external addrspace(2) constant i1
@gl_FragColor = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %color = alloca <4 x float>
  %color1 = load <4 x float>* @BaseColor
  store <4 x float> %color1, <4 x float>* %color
  %color22 = load <4 x float> addrspace(2)* @otherColor, !gla.uniform !5
  %0 = load float* @c
  %1 = load float addrspace(2)* @d, !gla.uniform !7
  %2 = fcmp ogt float %0, %1
  %3 = load <4 x float> addrspace(2)* @bigColor, !gla.uniform !8
  %4 = load <4 x float> addrspace(2)* @smallColor, !gla.uniform !9
  %.sink = select i1 %2, <4 x float> %3, <4 x float> %4
  %color3 = fadd <4 x float> %color1, %.sink
  store <4 x float> %color3, <4 x float>* %color
  %5 = extractelement <4 x float> %color3, i32 2
  %6 = load float addrspace(2)* @minimum, !gla.uniform !10
  %7 = fcmp olt float %5, %6
  br i1 %7, label %stage-exit, label %ifmerge6

ifmerge6:                                         ; preds = %entry
  %8 = fadd float %5, 1.000000e+00
  %9 = getelementptr <4 x float>* %color, i32 0, i32 2
  store float %8, float* %9
  %10 = load <4 x float>* %color
  %11 = extractelement <4 x float> %10, i32 2
  %12 = load float addrspace(2)* @threshhold, !gla.uniform !11
  %13 = fcmp ogt float %11, %12
  br i1 %13, label %then7, label %ifmerge8

then7:                                            ; preds = %ifmerge6
  call void @llvm.gla.discard()
  br label %stage-exit

ifmerge8:                                         ; preds = %ifmerge6
  %color9 = fadd <4 x float> %10, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color9, <4 x float>* %color
  %14 = extractelement <4 x float> %color9, i32 3
  %15 = load float addrspace(2)* @threshhold2, !gla.uniform !12
  %16 = fcmp ogt float %14, %15
  br i1 %16, label %then10, label %else23

then10:                                           ; preds = %ifmerge8
  %17 = extractelement <4 x float> %color9, i32 2
  %18 = fcmp ogt float %17, %15
  br i1 %18, label %stage-exit, label %else13

else13:                                           ; preds = %then10
  %19 = load i1 addrspace(2)* @b, !gla.uniform !13
  br i1 %19, label %then14, label %else15

then14:                                           ; preds = %else13
  %20 = fadd float %17, 1.000000e+00
  store float %20, float* %9
  %.pre = load <4 x float>* %color
  br label %ifmerge29

else15:                                           ; preds = %else13
  %21 = extractelement <4 x float> %color9, i32 0
  %22 = fcmp olt float %21, %6
  br i1 %22, label %then16, label %else18

then16:                                           ; preds = %else15
  call void @llvm.gla.discard()
  br label %stage-exit

else18:                                           ; preds = %else15
  %color19 = fadd <4 x float> %color9, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  store <4 x float> %color19, <4 x float>* %color
  br label %ifmerge29

else23:                                           ; preds = %ifmerge8
  %23 = load i1 addrspace(2)* @b, !gla.uniform !13
  br i1 %23, label %then24, label %stage-exit

then24:                                           ; preds = %else23
  call void @llvm.gla.discard()
  br label %stage-exit

ifmerge29:                                        ; preds = %else18, %then14
  %24 = phi <4 x float> [ %color19, %else18 ], [ %.pre, %then14 ]
  %gl_FragColor = fmul <4 x float> %color22, %24
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge29
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue, %entry, %then10, %else23, %then24, %then16, %then7
  ret void
}

; Function Attrs: nounwind
declare void @llvm.gla.discard() #0

attributes #0 = { nounwind }

!gla.entrypoint = !{!0}
!gla.inputs = !{!1, !3}
!gla.uniforms = !{!5, !7, !8, !9, !10, !11, !12, !13, !14}
!gla.outputs = !{!15}
!gla.noStaticUse = !{!14}

!0 = !{!"main", i32 15}
!1 = !{!"BaseColor", i32 1, <4 x float>* @BaseColor_typeProxy, !2}
!2 = !{i32 0, i32 0, i32 1024, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!3 = !{!"c", i32 1, float* @c_typeProxy, !4}
!4 = !{i32 0, i32 0, i32 1025, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!5 = !{!"otherColor", i32 12, <4 x float>* @otherColor_typeProxy, !6}
!6 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!7 = !{!"d", i32 12, float* @d_typeProxy, !6}
!8 = !{!"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, !6}
!9 = !{!"smallColor", i32 12, <4 x float>* @smallColor_typeProxy, !6}
!10 = !{!"minimum", i32 12, float* @minimum_typeProxy, !6}
!11 = !{!"threshhold", i32 12, float* @threshhold_typeProxy, !6}
!12 = !{!"threshhold2", i32 12, float* @threshhold2_typeProxy, !6}
!13 = !{!"b", i32 12, i1* @b_typeProxy, !6}
!14 = !{!"threshhold3", i32 12, float* @threshhold3_typeProxy, !6}
!15 = !{!"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, !16}
!16 = !{i32 0, i32 0, i32 1026, null, i32 0, i32 43, i32 -1, i32 0, i32 -1}

***Unsupported functionality: control flow: not all blocks were translated
#version 110
// LunarGOO output
uniform vec4 otherColor;
uniform float d;
uniform vec4 bigColor;
uniform vec4 smallColor;
uniform float minimum;
uniform float threshhold;
uniform float threshhold2;
uniform bool b;
uniform float threshhold3;
varying vec4 BaseColor;
varying float c;
const float C_1d0 = 1.0;
const vec4 C_vec4p1d0p = vec4(1.0);

void main()
{
	vec4 Lg_1;
	vec4 color;
	bool H_wll4g81 = c > d;
	vec4 _L = H_wll4g81 ? bigColor : smallColor;
	vec4 color1 = BaseColor + _L;
	bool H_n1llfu = color1.z < minimum;
	if (H_n1llfu) {
	} else {
		float H_jbywq7 = color1.z + C_1d0;
		color1.z = H_jbywq7;
		bool H_0imjer1 = color1.z > threshhold;
		if (H_0imjer1) {
			discard;
		} else {
			vec4 color2 = color1 + C_vec4p1d0p;
			bool H_we3i001 = color2.w > threshhold2;
			if (H_we3i001) {
				bool H_rmgj5t = color2.z > threshhold2;
				if (H_rmgj5t) {
				} else {
					if (b) {
						float H_q09d4s = C_1d0 + color2.z;
						color1.z = H_q09d4s;
						Lg_1 = color2;
					} else {
						bool H_0s69ih1 = color2.x < minimum;
						if (H_0s69ih1) {
							discard;
						} else {
							vec4 color3 = C_vec4p1d0p + color2;
							Lg_1 = color3;
						}
						
					}
					
				}
				
			} else {
				if (b) {
					discard;
				} else {
				}
				
			}
			
		}
		
	}
	
}

