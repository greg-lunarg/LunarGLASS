
Top IR:
; ModuleID = 'Glslang'

@BaseColor = global <4 x float> zeroinitializer
@otherColor = external addrspace(2) constant <4 x float>
@c = global float 0.000000e+00
@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@smallColor = external addrspace(2) constant <4 x float>
@gl_FragColor = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %color2 = alloca <4 x float>
  %color = alloca <4 x float>
  br label %mainBody

mainBody:                                         ; preds = %entry
  %color1 = load <4 x float>* @BaseColor
  store <4 x float> %color1, <4 x float>* %color
  %color22 = load <4 x float> addrspace(2)* @otherColor, !gla.uniform !5
  store <4 x float> %color22, <4 x float>* %color2
  %0 = load float* @c
  %1 = load float addrspace(2)* @d, !gla.uniform !7
  %2 = fcmp ogt float %0, %1
  br i1 %2, label %then, label %else

then:                                             ; preds = %mainBody
  %3 = load <4 x float> addrspace(2)* @bigColor, !gla.uniform !8
  %4 = load <4 x float>* %color
  %color3 = fadd <4 x float> %4, %3
  store <4 x float> %color3, <4 x float>* %color
  br label %ifmerge

else:                                             ; preds = %mainBody
  %5 = load <4 x float> addrspace(2)* @smallColor, !gla.uniform !9
  %6 = load <4 x float>* %color
  %color4 = fadd <4 x float> %6, %5
  store <4 x float> %color4, <4 x float>* %color
  br label %ifmerge

ifmerge:                                          ; preds = %else, %then
  %7 = load <4 x float>* %color
  %8 = load <4 x float>* %color2
  %gl_FragColor = fmul <4 x float> %7, %8
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %ifmerge
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

!gla.entrypoint = !{!0}
!gla.inputs = !{!1, !3}
!gla.uniforms = !{!5, !7, !8, !9}
!gla.outputs = !{!10}

!0 = !{!"main", i32 15}
!1 = !{!"BaseColor", i32 1, <4 x float>* @BaseColor_typeProxy, !2}
!2 = !{i32 0, i32 0, i32 1024, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!3 = !{!"c", i32 1, float* @c_typeProxy, !4}
!4 = !{i32 0, i32 0, i32 1025, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!5 = !{!"otherColor", i32 12, <4 x float>* @otherColor_typeProxy, !6}
!6 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!7 = !{!"d", i32 12, float* @d_typeProxy, !6}
!8 = !{!"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, !6}
!9 = !{!"smallColor", i32 12, <4 x float>* @smallColor_typeProxy, !6}
!10 = !{!"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, !11}
!11 = !{i32 0, i32 0, i32 1026, null, i32 0, i32 43, i32 -1, i32 0, i32 -1}


Bottom IR:
; ModuleID = 'Glslang'
target datalayout = "e-p:32:32"

@BaseColor = global <4 x float> zeroinitializer
@otherColor = external addrspace(2) constant <4 x float>
@c = global float 0.000000e+00
@d = external addrspace(2) constant float
@bigColor = external addrspace(2) constant <4 x float>
@smallColor = external addrspace(2) constant <4 x float>
@gl_FragColor = global <4 x float> zeroinitializer

define fastcc void @main() {
entry:
  %color1 = load <4 x float>* @BaseColor
  %color22 = load <4 x float> addrspace(2)* @otherColor, !gla.uniform !5
  %0 = load float* @c
  %1 = load float addrspace(2)* @d, !gla.uniform !7
  %2 = fcmp ogt float %0, %1
  %.pn.in = select i1 %2, <4 x float> addrspace(2)* @bigColor, <4 x float> addrspace(2)* @smallColor
  %.pn = load <4 x float> addrspace(2)* %.pn.in
  %color.0 = fadd <4 x float> %color1, %.pn
  %gl_FragColor = fmul <4 x float> %color22, %color.0
  store <4 x float> %gl_FragColor, <4 x float>* @gl_FragColor
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

!gla.entrypoint = !{!0}
!gla.inputs = !{!1, !3}
!gla.uniforms = !{!5, !7, !8, !9}
!gla.outputs = !{!10}

!0 = !{!"main", i32 15}
!1 = !{!"BaseColor", i32 1, <4 x float>* @BaseColor_typeProxy, !2}
!2 = !{i32 0, i32 0, i32 1024, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!3 = !{!"c", i32 1, float* @c_typeProxy, !4}
!4 = !{i32 0, i32 0, i32 1025, null, i32 1, i32 0, i32 -1, i32 0, i32 -1}
!5 = !{!"otherColor", i32 12, <4 x float>* @otherColor_typeProxy, !6}
!6 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!7 = !{!"d", i32 12, float* @d_typeProxy, !6}
!8 = !{!"bigColor", i32 12, <4 x float>* @bigColor_typeProxy, !6}
!9 = !{!"smallColor", i32 12, <4 x float>* @smallColor_typeProxy, !6}
!10 = !{!"gl_FragColor", i32 7, <4 x float>* @gl_FragColor_typeProxy, !11}
!11 = !{i32 0, i32 0, i32 1026, null, i32 0, i32 43, i32 -1, i32 0, i32 -1}
LunarGOO: /home/greg/ss/LunarGLASS.36/Backends/GLSL/BottomToGLSL.cpp:4559: void gla::GlslTarget::emitConstantInitializer(std::ostringstream&, const llvm::Constant*, llvm::Type*): Assertion `0 && "Constant type in Bottom IR"' failed.
