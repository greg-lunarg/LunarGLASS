
Top IR:
; ModuleID = 'Glslang'

%fromVertex = type { <3 x float> }
%fromVertex.0 = type { <3 x float> }
%gl_PerVertex = type { <4 x float>, float, [1 x float] }
%gl_PerVertex.1 = type { <4 x float>, float, [1 x float] }
%toFragment = type { <3 x float> }

@"anon@0" = global %fromVertex zeroinitializer
@fromV = global [6 x %fromVertex.0] zeroinitializer
@"anon@1" = global %gl_PerVertex zeroinitializer
@gl_in = global [6 x %gl_PerVertex.1] zeroinitializer
@gl_PrimitiveID = global i32 0
@gl_PrimitiveIDIn = global i32 0
@gl_Layer = global i32 0
@toF = global %toFragment zeroinitializer

define fastcc void @main() {
entry:
  br label %mainBody

mainBody:                                         ; preds = %entry
  %0 = load <3 x float>* getelementptr inbounds ([6 x %fromVertex.0]* @fromV, i32 0, i32 0, i32 0)
  store <3 x float> %0, <3 x float>* getelementptr inbounds (%fromVertex* @"anon@0", i32 0, i32 0)
  %1 = load <4 x float>* getelementptr inbounds ([6 x %gl_PerVertex.1]* @gl_in, i32 0, i32 0, i32 0)
  store <4 x float> %1, <4 x float>* getelementptr inbounds (%gl_PerVertex* @"anon@1", i32 0, i32 0)
  %2 = load float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @gl_in, i32 0, i32 3, i32 1)
  store float %2, float* getelementptr inbounds (%gl_PerVertex* @"anon@1", i32 0, i32 1)
  %gl_PrimitiveID = load i32* @gl_PrimitiveIDIn
  store i32 %gl_PrimitiveID, i32* @gl_PrimitiveID
  store i32 2, i32* @gl_Layer
  call void @llvm.gla.emitVertex()
  %3 = load <3 x float>* getelementptr inbounds ([6 x %fromVertex.0]* @fromV, i32 0, i32 0, i32 0)
  %4 = fmul <3 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %3
  store <3 x float> %4, <3 x float>* getelementptr inbounds (%fromVertex* @"anon@0", i32 0, i32 0)
  %5 = load <4 x float>* getelementptr inbounds ([6 x %gl_PerVertex.1]* @gl_in, i32 0, i32 0, i32 0)
  %6 = fmul <4 x float> <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>, %5
  store <4 x float> %6, <4 x float>* getelementptr inbounds (%gl_PerVertex* @"anon@1", i32 0, i32 0)
  %7 = load float* getelementptr inbounds ([6 x %gl_PerVertex.1]* @gl_in, i32 0, i32 3, i32 1)
  %8 = fmul float 2.000000e+00, %7
  store float %8, float* getelementptr inbounds (%gl_PerVertex* @"anon@1", i32 0, i32 1)
  %9 = load i32* @gl_PrimitiveIDIn
  %gl_PrimitiveID1 = add i32 %9, 1
  store i32 %gl_PrimitiveID1, i32* @gl_PrimitiveID
  store i32 3, i32* @gl_Layer
  call void @llvm.gla.emitVertex()
  call void @llvm.gla.endPrimitive()
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %mainBody
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind
declare void @llvm.gla.emitVertex() #0

; Function Attrs: nounwind
declare void @llvm.gla.endPrimitive() #0

attributes #0 = { nounwind }

!gla.invocations = !{!0}
!gla.numVertices = !{!1}
!gla.inputPrimitive = !{!2}
!gla.outputPrimitive = !{!3}
!gla.entrypoint = !{!4}
!gla.outputs = !{!5, !10, !19, !21, !23}
!gla.inputs = !{!26, !28, !30}
!gla.noStaticUse = !{!23}

!0 = !{i32 1}
!1 = !{i32 30}
!2 = !{i32 6}
!3 = !{i32 7}
!4 = !{!"main", i32 15}
!5 = !{!"", i32 16, %fromVertex* @"anon@0_typeProxy", !6, !7}
!6 = !{i32 0, i32 0, i32 1024, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!7 = !{!"fromVertex", !8, !"color", !9}
!8 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!9 = !{!"", !8}
!10 = !{!"", i32 16, %gl_PerVertex* @"anon@1_typeProxy", !11, !12}
!11 = !{i32 0, i32 0, i32 1031, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!12 = !{!"gl_PerVertex", !8, !"gl_Position", !13, !"gl_PointSize", !15, !"gl_ClipDistance", !17}
!13 = !{!"", !14}
!14 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 9, i32 -1, i32 0, i32 -1}
!15 = !{!"", !16}
!16 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 10, i32 -1, i32 0, i32 -1}
!17 = !{!"", !18}
!18 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 12, i32 -1, i32 0, i32 -1}
!19 = !{!"gl_PrimitiveID", i32 7, i32* @gl_PrimitiveID_typeProxy, !20}
!20 = !{i32 0, i32 0, i32 1052, null, i32 0, i32 31, i32 -1, i32 0, i32 -1}
!21 = !{!"gl_Layer", i32 7, i32* @gl_Layer_typeProxy, !22}
!22 = !{i32 0, i32 0, i32 1054, null, i32 0, i32 32, i32 -1, i32 0, i32 -1}
!23 = !{!"toF", i32 16, %toFragment* @toF_typeProxy, !24, !25}
!24 = !{i32 0, i32 0, i32 1055, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!25 = !{!"toFragment", !8, !"color", !9}
!26 = !{!"fromV", i32 17, [6 x %fromVertex.0]* @fromV_typeProxy, !27, !7}
!27 = !{i32 0, i32 0, i32 1025, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!28 = !{!"gl_in", i32 17, [6 x %gl_PerVertex.1]* @gl_in_typeProxy, !29, !12}
!29 = !{i32 0, i32 0, i32 1034, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!30 = !{!"gl_PrimitiveIDIn", i32 1, i32* @gl_PrimitiveIDIn_typeProxy, !31}
!31 = !{i32 0, i32 0, i32 1053, null, i32 0, i32 31, i32 -1, i32 0, i32 -1}


Bottom IR:
; ModuleID = 'Glslang'
target datalayout = "e-p:32:32"

%fromVertex = type { <3 x float> }
%fromVertex.0 = type { <3 x float> }
%gl_PerVertex = type { <4 x float>, float, [1 x float] }
%gl_PerVertex.1 = type { <4 x float>, float, [1 x float] }
%toFragment = type { <3 x float> }

@"anon@0" = global %fromVertex zeroinitializer
@fromV = global [6 x %fromVertex.0] zeroinitializer
@"anon@1" = global %gl_PerVertex zeroinitializer
@gl_in = global [6 x %gl_PerVertex.1] zeroinitializer
@gl_PrimitiveID = global i32 0
@gl_PrimitiveIDIn = global i32 0
@gl_Layer = global i32 0
@toF = global %toFragment zeroinitializer

define fastcc void @main() {
entry:
  %gla_constGEP = getelementptr [6 x %fromVertex.0]* @fromV, i32 0, i32 0, i32 0
  %0 = load <3 x float>* %gla_constGEP
  %gla_constGEP2 = getelementptr %fromVertex* @"anon@0", i32 0, i32 0
  store <3 x float> %0, <3 x float>* %gla_constGEP2
  %gla_constGEP3 = getelementptr [6 x %gl_PerVertex.1]* @gl_in, i32 0, i32 0, i32 0
  %1 = load <4 x float>* %gla_constGEP3
  %gla_constGEP4 = getelementptr %gl_PerVertex* @"anon@1", i32 0, i32 0
  store <4 x float> %1, <4 x float>* %gla_constGEP4
  %gla_constGEP5 = getelementptr [6 x %gl_PerVertex.1]* @gl_in, i32 0, i32 3, i32 1
  %2 = load float* %gla_constGEP5
  %gla_constGEP6 = getelementptr %gl_PerVertex* @"anon@1", i32 0, i32 1
  store float %2, float* %gla_constGEP6
  %gl_PrimitiveID = load i32* @gl_PrimitiveIDIn
  store i32 %gl_PrimitiveID, i32* @gl_PrimitiveID
  store i32 2, i32* @gl_Layer
  call void @llvm.gla.emitVertex()
  %gla_constGEP7 = getelementptr [6 x %fromVertex.0]* @fromV, i32 0, i32 0, i32 0
  %3 = load <3 x float>* %gla_constGEP7
  %4 = fmul <3 x float> %3, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %gla_constGEP8 = getelementptr %fromVertex* @"anon@0", i32 0, i32 0
  store <3 x float> %4, <3 x float>* %gla_constGEP8
  %gla_constGEP9 = getelementptr [6 x %gl_PerVertex.1]* @gl_in, i32 0, i32 0, i32 0
  %5 = load <4 x float>* %gla_constGEP9
  %6 = fmul <4 x float> %5, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %gla_constGEP10 = getelementptr %gl_PerVertex* @"anon@1", i32 0, i32 0
  store <4 x float> %6, <4 x float>* %gla_constGEP10
  %gla_constGEP11 = getelementptr [6 x %gl_PerVertex.1]* @gl_in, i32 0, i32 3, i32 1
  %7 = load float* %gla_constGEP11
  %8 = fmul float %7, 2.000000e+00
  %gla_constGEP12 = getelementptr %gl_PerVertex* @"anon@1", i32 0, i32 1
  store float %8, float* %gla_constGEP12
  %9 = load i32* @gl_PrimitiveIDIn
  %gl_PrimitiveID1 = add i32 %9, 1
  store i32 %gl_PrimitiveID1, i32* @gl_PrimitiveID
  store i32 3, i32* @gl_Layer
  call void @llvm.gla.emitVertex()
  call void @llvm.gla.endPrimitive()
  br label %stage-epilogue

stage-epilogue:                                   ; preds = %entry
  br label %stage-exit

stage-exit:                                       ; preds = %stage-epilogue
  ret void
}

; Function Attrs: nounwind
declare void @llvm.gla.emitVertex() #0

; Function Attrs: nounwind
declare void @llvm.gla.endPrimitive() #0

attributes #0 = { nounwind }

!gla.invocations = !{!0}
!gla.numVertices = !{!1}
!gla.inputPrimitive = !{!2}
!gla.outputPrimitive = !{!3}
!gla.entrypoint = !{!4}
!gla.outputs = !{!5, !10, !19, !21, !23}
!gla.inputs = !{!26, !28, !30}
!gla.noStaticUse = !{!23}

!0 = !{i32 1}
!1 = !{i32 30}
!2 = !{i32 6}
!3 = !{i32 7}
!4 = !{!"main", i32 15}
!5 = !{!"", i32 16, %fromVertex* @"anon@0_typeProxy", !6, !7}
!6 = !{i32 0, i32 0, i32 1024, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!7 = !{!"fromVertex", !8, !"color", !9}
!8 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 0, i32 -1, i32 0, i32 -1}
!9 = !{!"", !8}
!10 = !{!"", i32 16, %gl_PerVertex* @"anon@1_typeProxy", !11, !12}
!11 = !{i32 0, i32 0, i32 1031, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!12 = !{!"gl_PerVertex", !8, !"gl_Position", !13, !"gl_PointSize", !15, !"gl_ClipDistance", !17}
!13 = !{!"", !14}
!14 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 9, i32 -1, i32 0, i32 -1}
!15 = !{!"", !16}
!16 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 10, i32 -1, i32 0, i32 -1}
!17 = !{!"", !18}
!18 = !{i32 0, i32 0, i32 1024, null, i32 -1, i32 12, i32 -1, i32 0, i32 -1}
!19 = !{!"gl_PrimitiveID", i32 7, i32* @gl_PrimitiveID_typeProxy, !20}
!20 = !{i32 0, i32 0, i32 1052, null, i32 0, i32 31, i32 -1, i32 0, i32 -1}
!21 = !{!"gl_Layer", i32 7, i32* @gl_Layer_typeProxy, !22}
!22 = !{i32 0, i32 0, i32 1054, null, i32 0, i32 32, i32 -1, i32 0, i32 -1}
!23 = !{!"toF", i32 16, %toFragment* @toF_typeProxy, !24, !25}
!24 = !{i32 0, i32 0, i32 1055, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!25 = !{!"toFragment", !8, !"color", !9}
!26 = !{!"fromV", i32 17, [6 x %fromVertex.0]* @fromV_typeProxy, !27, !7}
!27 = !{i32 0, i32 0, i32 1025, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!28 = !{!"gl_in", i32 17, [6 x %gl_PerVertex.1]* @gl_in_typeProxy, !29, !12}
!29 = !{i32 0, i32 0, i32 1034, null, i32 0, i32 0, i32 -1, i32 0, i32 -1}
!30 = !{!"gl_PrimitiveIDIn", i32 1, i32* @gl_PrimitiveIDIn_typeProxy, !31}
!31 = !{i32 0, i32 0, i32 1053, null, i32 0, i32 31, i32 -1, i32 0, i32 -1}
#version 150 core
// LunarGOO output
layout(triangles_adjacency) in;
layout(triangle_strip) out;
layout(max_vertices = 30) out;
in fromVertex {
	vec3 color;
} fromV[6];
out fromVertex {
	vec3 color;
} ;
out toFragment {
	vec3 color;
} toF;
const int C_2 = 2;
const vec3 C_vec3p2d0p = vec3(2.0);
const vec4 C_vec4p2d0p = vec4(2.0);
const float C_2d0 = 2.0;
const int C_1 = 1;
const int C_3 = 3;

void main()
{
	color = fromV[0].color;
	gl_Position = gl_in[0].gl_Position;
	gl_PointSize = gl_in[3].gl_PointSize;
	gl_PrimitiveID = gl_PrimitiveIDIn;
	gl_Layer = C_2;
	EmitVertex();
	vec3 H_bl1a881 = fromV[0].color * C_vec3p2d0p;
	color = H_bl1a881;
	vec4 H_jber0x = gl_in[0].gl_Position * C_vec4p2d0p;
	gl_Position = H_jber0x;
	float H_wan9be1 = gl_in[3].gl_PointSize * C_2d0;
	gl_PointSize = H_wan9be1;
	int Ll_PrimitiveID1 = gl_PrimitiveIDIn + C_1;
	gl_PrimitiveID = Ll_PrimitiveID1;
	gl_Layer = C_3;
	EmitVertex();
	EndPrimitive();
	
}

